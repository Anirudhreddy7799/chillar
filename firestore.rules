rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isCurrentUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasActiveSubscription(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.isSubscribed == true;
    }

    // User rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isCurrentUser(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Subscription rules
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Reward rules
    match /rewards/{rewardId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Draw rules
    match /draws/{drawId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Claim rules
    match /claims/{claimId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId && 
        hasActiveSubscription(request.auth.uid);
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}
