import { storage as firebaseStorage } from "./firebase-storage";
import { IStorage } from "./types/storage";

// Export the Firebase storage implementation as the default storage
export const storage: IStorage = firebaseStorage;
  id: string;
  email: string;
  uid: string;
  referralCode: string;
  referredBy?: string;
  isAdmin?: boolean;
  isSubscribed?: boolean;
  createdAt: Date;
}

interface Subscription {
  id: string;
  userId: string;
  status: "active" | "cancelled" | "expired";
  startDate: Date;
  endDate: Date;
  razorpaySubId?: string;
  plan: string;
  amount: number;
}

interface Reward {
  id: string;
  week: string;
  prizeName: string;
  prizeValue: number;
  prizeType: string;
  sponsor: string;
  imageUrl?: string;
  drawDate: Date;
  winnerId?: string;
  status: "pending" | "drawn" | "claimed";
}

interface Draw {
  id: string;
  rewardId: string;
  week: string;
  timestamp: Date;
  winnerId?: string;
  status: "pending" | "completed";
}

interface Claim {
  id: string;
  userId: string;
  rewardId: string;
  status: "pending" | "approved" | "rejected";
  submittedAt: Date;
  processedAt?: Date;
  metadata?: Record<string, any>;
}

// Get Firestore instance
const db = getFirestore();

// Storage interface for all CRUD operations
export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  getUserByUid(uid: string): Promise<User | undefined>;
  getUserByReferralCode(code: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  updateUser(id: number, data: Partial<User>): Promise<User>;
  getAdminUsers(): Promise<User[]>;
  getAllUsers(): Promise<User[]>;
  getActiveSubscribers(): Promise<User[]>;

  // Subscription operations
  getSubscription(id: number): Promise<Subscription | undefined>;
  getSubscriptionByUserId(userId: number): Promise<Subscription | undefined>;
  getSubscriptionByRazorpayId(
    razorpaySubId: string
  ): Promise<Subscription | undefined>;
  createSubscription(subscription: InsertSubscription): Promise<Subscription>;
  updateSubscription(
    id: number,
    data: Partial<Subscription>
  ): Promise<Subscription>;
  getAllSubscriptions(): Promise<Subscription[]>;
  getActiveSubscriptions(): Promise<Subscription[]>;

  // Reward operations
  getReward(id: number): Promise<Reward | undefined>;
  getRewardByWeek(week: string): Promise<Reward | undefined>;
  createReward(reward: InsertReward): Promise<Reward>;
  updateReward(id: number, data: Partial<Reward>): Promise<Reward>;
  deleteReward(id: number): Promise<boolean>;
  getAllRewards(): Promise<Reward[]>;
  getUpcomingRewards(): Promise<Reward[]>;
  getPastRewards(): Promise<Reward[]>;
  getCurrentReward(): Promise<Reward | undefined>;

  // Draw operations
  getDraw(id: number): Promise<Draw | undefined>;
  getDrawByWeek(week: string): Promise<Draw | undefined>;
  createDraw(draw: InsertDraw): Promise<Draw>;
  updateDraw(id: number, data: Partial<Draw>): Promise<Draw>;
  getAllDraws(): Promise<Draw[]>;
  getPastDraws(): Promise<Draw[]>;
  getDrawsWithWinners(): Promise<Draw[]>;

  // Claim operations
  getClaim(id: number): Promise<Claim | undefined>;
  getClaimByUserAndReward(
    userId: number,
    rewardId: number
  ): Promise<Claim | undefined>;
  createClaim(claim: InsertClaim): Promise<Claim>;
  updateClaim(id: number, data: Partial<Claim>): Promise<Claim>;
  getAllClaims(): Promise<Claim[]>;
  getPendingClaims(): Promise<(Claim & { user?: User; reward?: Reward })[]>;
  getUserClaims(userId: number): Promise<(Claim & { reward?: Reward })[]>;
}

// Memory storage implementation
export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private subscriptions: Map<number, Subscription>;
  private rewards: Map<number, Reward>;
  private draws: Map<number, Draw>;
  private claims: Map<number, Claim>;
  private currentUserId: number;
  private currentSubscriptionId: number;
  private currentRewardId: number;
  private currentDrawId: number;
  private currentClaimId: number;

  constructor() {
    this.users = new Map();
    this.subscriptions = new Map();
    this.rewards = new Map();
    this.draws = new Map();
    this.claims = new Map();
    this.currentUserId = 1;
    this.currentSubscriptionId = 1;
    this.currentRewardId = 1;
    this.currentDrawId = 1;
    this.currentClaimId = 1;

    // Create admin user
    this.createUser({
      email: "admin@chillarclub.in",
      password: "hashed_password",
      uid: "admin123",
      isAdmin: true,
      referralCode: "ADMIN123",
      isSubscribed: true,
    });

    // Initialize with sample data for development
    const now = new Date();
    const nextWeek = new Date(now);
    nextWeek.setDate(now.getDate() + 7);
    const twoWeeksFromNow = new Date(now);
    twoWeeksFromNow.setDate(now.getDate() + 14);

    // Create rewards
    this.createReward({
      week: "2023-29",
      prizeName: "₹199 Mobile Recharge",
      prizeValue: 199,
      prizeType: "recharge",
      sponsor: "Airtel",
      imageUrl: "https://images.unsplash.com/photo-1556742502-ec7c0e9f34b1",
    });

    this.createReward({
      week: "2023-30",
      prizeName: "₹500 Amazon Voucher",
      prizeValue: 500,
      prizeType: "voucher",
      sponsor: "Amazon",
      imageUrl: "https://images.unsplash.com/photo-1607083206968-13611e3d76db",
    });

    this.createReward({
      week: "2023-31",
      prizeName: "₹300 Movie Tickets",
      prizeValue: 300,
      prizeType: "voucher",
      sponsor: "BookMyShow",
      imageUrl: "https://images.unsplash.com/photo-1485846234645-a62644f84728",
    });
  }

  // User operations
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find((user) => user.email === email);
  }

  async getUserByUid(uid: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find((user) => user.uid === uid);
  }

  async getUserByReferralCode(code: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.referralCode === code
    );
  }

  async createUser(user: InsertUser): Promise<User> {
    const id = this.currentUserId++;
    const newUser: User = { ...user, id };
    this.users.set(id, newUser);
    return newUser;
  }

  async updateUser(id: number, data: Partial<User>): Promise<User> {
    const user = await this.getUser(id);
    if (!user) {
      throw new Error(`User with id ${id} not found`);
    }
    const updatedUser = { ...user, ...data };
    this.users.set(id, updatedUser);
    return updatedUser;
  }

  async getAdminUsers(): Promise<User[]> {
    return Array.from(this.users.values()).filter((user) => user.isAdmin);
  }

  async getAllUsers(): Promise<User[]> {
    return Array.from(this.users.values());
  }

  async getActiveSubscribers(): Promise<User[]> {
    return Array.from(this.users.values()).filter((user) => user.isSubscribed);
  }

  // Subscription operations
  async getSubscription(id: number): Promise<Subscription | undefined> {
    return this.subscriptions.get(id);
  }

  async getSubscriptionByUserId(
    userId: number
  ): Promise<Subscription | undefined> {
    return Array.from(this.subscriptions.values()).find(
      (sub) => sub.userId === userId
    );
  }

  async getSubscriptionByRazorpayId(
    razorpaySubId: string
  ): Promise<Subscription | undefined> {
    return Array.from(this.subscriptions.values()).find(
      (sub) => sub.razorpaySubId === razorpaySubId
    );
  }

  async createSubscription(
    subscription: InsertSubscription
  ): Promise<Subscription> {
    const id = this.currentSubscriptionId++;
    const newSubscription: Subscription = { ...subscription, id };
    this.subscriptions.set(id, newSubscription);
    return newSubscription;
  }

  async updateSubscription(
    id: number,
    data: Partial<Subscription>
  ): Promise<Subscription> {
    const subscription = await this.getSubscription(id);
    if (!subscription) {
      throw new Error(`Subscription with id ${id} not found`);
    }
    const updatedSubscription = { ...subscription, ...data };
    this.subscriptions.set(id, updatedSubscription);
    return updatedSubscription;
  }

  async getAllSubscriptions(): Promise<Subscription[]> {
    return Array.from(this.subscriptions.values());
  }

  async getActiveSubscriptions(): Promise<Subscription[]> {
    return Array.from(this.subscriptions.values()).filter(
      (sub) => sub.status === "active" && new Date(sub.endDate) > new Date()
    );
  }

  // Reward operations
  async getReward(id: number): Promise<Reward | undefined> {
    return this.rewards.get(id);
  }

  async getRewardByWeek(week: string): Promise<Reward | undefined> {
    return Array.from(this.rewards.values()).find(
      (reward) => reward.week === week
    );
  }

  async createReward(reward: InsertReward): Promise<Reward> {
    const id = this.currentRewardId++;
    const newReward: Reward = { ...reward, id, createdAt: new Date() };
    this.rewards.set(id, newReward);
    return newReward;
  }

  async updateReward(id: number, data: Partial<Reward>): Promise<Reward> {
    const reward = await this.getReward(id);
    if (!reward) {
      throw new Error(`Reward with id ${id} not found`);
    }
    const updatedReward = { ...reward, ...data };
    this.rewards.set(id, updatedReward);
    return updatedReward;
  }

  async deleteReward(id: number): Promise<boolean> {
    return this.rewards.delete(id);
  }

  async getAllRewards(): Promise<Reward[]> {
    return Array.from(this.rewards.values());
  }

  async getUpcomingRewards(): Promise<Reward[]> {
    const currentWeek = this.getCurrentWeekNumber();
    return Array.from(this.rewards.values())
      .filter((reward) => {
        const rewardWeek = reward.week.split("-")[1];
        return parseInt(rewardWeek) >= currentWeek;
      })
      .sort((a, b) => {
        const weekA = parseInt(a.week.split("-")[1]);
        const weekB = parseInt(b.week.split("-")[1]);
        return weekA - weekB;
      });
  }

  async getPastRewards(): Promise<Reward[]> {
    const currentWeek = this.getCurrentWeekNumber();
    return Array.from(this.rewards.values())
      .filter((reward) => {
        const rewardWeek = reward.week.split("-")[1];
        return parseInt(rewardWeek) < currentWeek;
      })
      .sort((a, b) => {
        const weekA = parseInt(a.week.split("-")[1]);
        const weekB = parseInt(b.week.split("-")[1]);
        return weekB - weekA;
      });
  }

  async getCurrentReward(): Promise<Reward | undefined> {
    const currentWeek = this.getCurrentWeekNumber();
    const currentYear = new Date().getFullYear();
    const weekString = `${currentYear}-${currentWeek < 10 ? "0" + currentWeek : currentWeek}`;
    return this.getRewardByWeek(weekString);
  }

  // Draw operations
  async getDraw(id: number): Promise<Draw | undefined> {
    return this.draws.get(id);
  }

  async getDrawByWeek(week: string): Promise<Draw | undefined> {
    return Array.from(this.draws.values()).find((draw) => draw.week === week);
  }

  async createDraw(draw: InsertDraw): Promise<Draw> {
    const id = this.currentDrawId++;
    const newDraw: Draw = { ...draw, id, timestamp: new Date() };
    this.draws.set(id, newDraw);
    return newDraw;
  }

  async updateDraw(id: number, data: Partial<Draw>): Promise<Draw> {
    const draw = await this.getDraw(id);
    if (!draw) {
      throw new Error(`Draw with id ${id} not found`);
    }
    const updatedDraw = { ...draw, ...data };
    this.draws.set(id, updatedDraw);
    return updatedDraw;
  }

  async getAllDraws(): Promise<Draw[]> {
    return Array.from(this.draws.values());
  }

  async getPastDraws(): Promise<Draw[]> {
    const currentWeek = this.getCurrentWeekNumber();
    return Array.from(this.draws.values())
      .filter((draw) => {
        const drawWeek = draw.week.split("-")[1];
        return parseInt(drawWeek) < currentWeek;
      })
      .sort((a, b) => {
        const weekA = parseInt(a.week.split("-")[1]);
        const weekB = parseInt(b.week.split("-")[1]);
        return weekB - weekA;
      });
  }

  async getDrawsWithWinners(): Promise<Draw[]> {
    return Array.from(this.draws.values())
      .filter((draw) => new Date(draw.timestamp) < new Date())
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
  }

  // Claim operations
  async getClaim(id: number): Promise<Claim | undefined> {
    return this.claims.get(id);
  }

  async getClaimByUserAndReward(
    userId: number,
    rewardId: number
  ): Promise<Claim | undefined> {
    return Array.from(this.claims.values()).find(
      (claim) => claim.userId === userId && claim.rewardId === rewardId
    );
  }

  async createClaim(claim: InsertClaim): Promise<Claim> {
    const id = this.currentClaimId++;
    const newClaim: Claim = { ...claim, id, submittedAt: new Date() };
    this.claims.set(id, newClaim);
    return newClaim;
  }

  async updateClaim(id: number, data: Partial<Claim>): Promise<Claim> {
    const claim = await this.getClaim(id);
    if (!claim) {
      throw new Error(`Claim with id ${id} not found`);
    }
    const updatedClaim = { ...claim, ...data };
    this.claims.set(id, updatedClaim);
    return updatedClaim;
  }

  async getAllClaims(): Promise<Claim[]> {
    return Array.from(this.claims.values());
  }

  async getPendingClaims(): Promise<
    (Claim & { user?: User; reward?: Reward })[]
  > {
    const pendingClaims = Array.from(this.claims.values()).filter(
      (claim) => claim.status === "pending" || claim.status === "approved"
    );

    return await Promise.all(
      pendingClaims.map(async (claim) => {
        const user = await this.getUser(claim.userId);
        const reward = await this.getReward(claim.rewardId);
        return { ...claim, user, reward };
      })
    );
  }

  async getUserClaims(
    userId: number
  ): Promise<(Claim & { reward?: Reward })[]> {
    const userClaims = Array.from(this.claims.values()).filter(
      (claim) => claim.userId === userId
    );

    return await Promise.all(
      userClaims.map(async (claim) => {
        const reward = await this.getReward(claim.rewardId);
        return { ...claim, reward };
      })
    );
  }

  // Helper method to get current week number
  private getCurrentWeekNumber(): number {
    const now = new Date();
    const start = new Date(now.getFullYear(), 0, 1);
    const diff = now.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const day = Math.floor(diff / oneDay);
    return Math.ceil((day + start.getDay()) / 7);
  }
}

// Database storage implementation
export class DatabaseStorage implements IStorage {
  // User operations
  async getUser(id: number): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user;
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.email, email));
    return user;
  }

  async getUserByUid(uid: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.uid, uid));
    return user;
  }

  async getUserByReferralCode(code: string): Promise<User | undefined> {
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.referralCode, code));
    return user;
  }

  async createUser(user: InsertUser): Promise<User> {
    const [newUser] = await db.insert(users).values(user).returning();
    return newUser;
  }

  async updateUser(id: number, data: Partial<User>): Promise<User> {
    const [updatedUser] = await db
      .update(users)
      .set(data)
      .where(eq(users.id, id))
      .returning();

    if (!updatedUser) {
      throw new Error(`User with id ${id} not found`);
    }

    return updatedUser;
  }

  async getAdminUsers(): Promise<User[]> {
    return await db.select().from(users).where(eq(users.isAdmin, true));
  }

  async getAllUsers(): Promise<User[]> {
    return await db.select().from(users);
  }

  async getActiveSubscribers(): Promise<User[]> {
    return await db.select().from(users).where(eq(users.isSubscribed, true));
  }

  // Subscription operations
  async getSubscription(id: number): Promise<Subscription | undefined> {
    const [subscription] = await db
      .select()
      .from(subscriptions)
      .where(eq(subscriptions.id, id));
    return subscription;
  }

  async getSubscriptionByUserId(
    userId: number
  ): Promise<Subscription | undefined> {
    const [subscription] = await db
      .select()
      .from(subscriptions)
      .where(eq(subscriptions.userId, userId));
    return subscription;
  }

  async getSubscriptionByRazorpayId(
    razorpaySubId: string
  ): Promise<Subscription | undefined> {
    const [subscription] = await db
      .select()
      .from(subscriptions)
      .where(eq(subscriptions.razorpaySubId, razorpaySubId));
    return subscription;
  }

  async createSubscription(
    subscription: InsertSubscription
  ): Promise<Subscription> {
    const [newSubscription] = await db
      .insert(subscriptions)
      .values(subscription)
      .returning();
    return newSubscription;
  }

  async updateSubscription(
    id: number,
    data: Partial<Subscription>
  ): Promise<Subscription> {
    const [updatedSubscription] = await db
      .update(subscriptions)
      .set(data)
      .where(eq(subscriptions.id, id))
      .returning();

    if (!updatedSubscription) {
      throw new Error(`Subscription with id ${id} not found`);
    }

    return updatedSubscription;
  }

  async getAllSubscriptions(): Promise<Subscription[]> {
    return await db.select().from(subscriptions);
  }

  async getActiveSubscriptions(): Promise<Subscription[]> {
    const now = new Date();
    return await db
      .select()
      .from(subscriptions)
      .where(
        and(eq(subscriptions.status, "active"), gte(subscriptions.endDate, now))
      );
  }

  // Reward operations
  async getReward(id: number): Promise<Reward | undefined> {
    const [reward] = await db.select().from(rewards).where(eq(rewards.id, id));
    return reward;
  }

  async getRewardByWeek(week: string): Promise<Reward | undefined> {
    const [reward] = await db
      .select()
      .from(rewards)
      .where(eq(rewards.week, week));
    return reward;
  }

  async createReward(reward: InsertReward): Promise<Reward> {
    const [newReward] = await db.insert(rewards).values(reward).returning();
    return newReward;
  }

  async updateReward(id: number, data: Partial<Reward>): Promise<Reward> {
    const [updatedReward] = await db
      .update(rewards)
      .set(data)
      .where(eq(rewards.id, id))
      .returning();

    if (!updatedReward) {
      throw new Error(`Reward with id ${id} not found`);
    }

    return updatedReward;
  }

  async deleteReward(id: number): Promise<boolean> {
    const result = await db.delete(rewards).where(eq(rewards.id, id));
    return result.rowCount > 0;
  }

  async getAllRewards(): Promise<Reward[]> {
    return db.select().from(rewards).orderBy(desc(rewards.drawDate));
  }

  async getUpcomingRewards(): Promise<Reward[]> {
    const now = new Date();
    return db
      .select()
      .from(rewards)
      .where(gte(rewards.drawDate, now))
      .orderBy(asc(rewards.drawDate));
  }

  async getPastRewards(): Promise<Reward[]> {
    const currentWeek = this.getCurrentWeekNumber();
    const currentYear = new Date().getFullYear();

    const result = await db.select().from(rewards).orderBy(desc(rewards.week));

    return result.filter((reward) => {
      const [year, weekStr] = reward.week.split("-");
      const week = parseInt(weekStr);
      const rewardYear = parseInt(year);

      if (rewardYear < currentYear) return true;
      if (rewardYear > currentYear) return false;

      return week < currentWeek;
    });
  }

  async getCurrentReward(): Promise<Reward | undefined> {
    const currentWeek = this.getCurrentWeekNumber();
    const currentYear = new Date().getFullYear();
    const weekString = `${currentYear}-${currentWeek < 10 ? "0" + currentWeek : currentWeek}`;
    return this.getRewardByWeek(weekString);
  }

  // Draw operations
  async getDraw(id: number): Promise<Draw | undefined> {
    const [draw] = await db.select().from(draws).where(eq(draws.id, id));
    return draw;
  }

  async getDrawByWeek(week: string): Promise<Draw | undefined> {
    const [draw] = await db.select().from(draws).where(eq(draws.week, week));
    return draw;
  }

  async createDraw(draw: InsertDraw): Promise<Draw> {
    const [newDraw] = await db.insert(draws).values(draw).returning();
    return newDraw;
  }

  async updateDraw(id: number, data: Partial<Draw>): Promise<Draw> {
    const [updatedDraw] = await db
      .update(draws)
      .set(data)
      .where(eq(draws.id, id))
      .returning();

    if (!updatedDraw) {
      throw new Error(`Draw with id ${id} not found`);
    }

    return updatedDraw;
  }

  async getAllDraws(): Promise<Draw[]> {
    return await db.select().from(draws);
  }

  async getPastDraws(): Promise<Draw[]> {
    const currentWeek = this.getCurrentWeekNumber();
    const currentYear = new Date().getFullYear();

    const result = await db.select().from(draws).orderBy(desc(draws.week));

    return result.filter((draw) => {
      const [year, weekStr] = draw.week.split("-");
      const week = parseInt(weekStr);
      const drawYear = parseInt(year);

      if (drawYear < currentYear) return true;
      if (drawYear > currentYear) return false;

      return week < currentWeek;
    });
  }

  async getDrawsWithWinners(): Promise<Draw[]> {
    return db
      .select()
      .from(draws)
      .where(lt(draws.drawDate, new Date()))
      .orderBy(desc(draws.drawDate));
  }

  // Claim operations
  async getClaim(id: number): Promise<Claim | undefined> {
    const [claim] = await db.select().from(claims).where(eq(claims.id, id));
    return claim;
  }

  async getClaimByUserAndReward(
    userId: number,
    rewardId: number
  ): Promise<Claim | undefined> {
    const [claim] = await db
      .select()
      .from(claims)
      .where(and(eq(claims.userId, userId), eq(claims.rewardId, rewardId)));
    return claim;
  }

  async createClaim(claim: InsertClaim): Promise<Claim> {
    const [newClaim] = await db.insert(claims).values(claim).returning();
    return newClaim;
  }

  async updateClaim(id: number, data: Partial<Claim>): Promise<Claim> {
    const [updatedClaim] = await db
      .update(claims)
      .set(data)
      .where(eq(claims.id, id))
      .returning();

    if (!updatedClaim) {
      throw new Error(`Claim with id ${id} not found`);
    }

    return updatedClaim;
  }

  async getAllClaims(): Promise<Claim[]> {
    return await db.select().from(claims);
  }

  async getPendingClaims(): Promise<
    (Claim & { user?: User; reward?: Reward })[]
  > {
    const pendingClaims = await db
      .select()
      .from(claims)
      .where(or(eq(claims.status, "pending"), eq(claims.status, "approved")));

    return await Promise.all(
      pendingClaims.map(async (claim) => {
        const [user] = await db
          .select()
          .from(users)
          .where(eq(users.id, claim.userId));
        const [reward] = await db
          .select()
          .from(rewards)
          .where(eq(rewards.id, claim.rewardId));
        return { ...claim, user, reward };
      })
    );
  }

  async getUserClaims(
    userId: number
  ): Promise<(Claim & { reward?: Reward })[]> {
    const userClaims = await db
      .select()
      .from(claims)
      .where(eq(claims.userId, userId));

    return await Promise.all(
      userClaims.map(async (claim) => {
        const [reward] = await db
          .select()
          .from(rewards)
          .where(eq(rewards.id, claim.rewardId));
        return { ...claim, reward };
      })
    );
  }

  // Helper method to get current week number
  private getCurrentWeekNumber(): number {
    const now = new Date();
    const start = new Date(now.getFullYear(), 0, 1);
    const diff = now.getTime() - start.getTime();
    const oneDay = 1000 * 60 * 60 * 24;
    const day = Math.floor(diff / oneDay);
    return Math.ceil((day + start.getDay()) / 7);
  }
}

// Export a default storage instance
export const storage = new DatabaseStorage();
